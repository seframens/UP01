import threading
import time
from threading import Thread

# 5.1 Использование семафоров
semaphore = threading.Semaphore(2)

def worker_semaphore(worker_id):
    with semaphore:
        print(f'Поток {worker_id} зашел в критическую секцию')
        time.sleep(2)
        print(f'Поток {worker_id} вышел из критической секции')

threads = [threading.Thread(target=worker_semaphore, args=(i,)) for i in range(5)]
for t in threads:
    t.start()
for t in threads:
    t.join()

# 5.2 Использование Event
event = threading.Event()

def worker_event():
    print('Поток ожидает сигнала...')
    event.wait()
    print('Поток получил сигнал и продолжает выполнение')

thread_event = threading.Thread(target=worker_event)
thread_event.start()
time.sleep(3)
event.set()
thread_event.join()

# 5.3 Использование Condition
condition = threading.Condition()
message = None

def producer():
    global message
    with condition:
        message = "Данные готовы"
        print("Производитель отправляет сообщение")
        condition.notify()

def consumer():
    global message
    with condition:
        print("Потребитель ожидает сообщение")
        condition.wait()
        print(f"Потребитель получил сообщение: {message}")

threading.Thread(target=consumer).start()
time.sleep(2)
threading.Thread(target=producer).start()

# 5.4 Низкоуровневый доступ к потокам

def thread_function(name):
    print(f'Поток {name} запущен')
    time.sleep(2)
    print(f'Поток {name} завершен')

try:
    Thread.start_new_thread(thread_function, ("Thread-1",))
    Thread.start_new_thread(thread_function, ("Thread-2",))
except Exception as e:
    print(f'Ошибка при запуске потоков: {e}')

time.sleep(3)
